#version 430 core
layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

struct Vertex {
	vec4 pos;
	vec4 color;
};

struct Instance {
	vec4 ctrRad;
};

layout(std430, binding = 0) writeonly buffer VertexBuffer {
	uint counter;
    Vertex data[];
} vbuf;

layout(std430, binding = 3) writeonly buffer InstanceBuffer {
    Instance data[];
} ibuf;

#define M_PI 3.1415926535897932384626433832795
#define R 0.1

vec2 rotate(float angle, vec2 origin, vec2 point) {
	mat2 rotMat = mat2(cos(angle), sin(angle), -sin(angle), cos(angle));
	return rotMat * (point - origin) + origin;
}

void main() {
	uvec3 threadSize = gl_WorkGroupSize * gl_NumWorkGroups;
	uvec3 threadID = gl_GlobalInvocationID;

	uint thread1DSize = threadSize.x * threadSize.y * threadSize.z;
	uint threadIdx = gl_GlobalInvocationID.z * threadSize.x * threadSize.y +
		gl_GlobalInvocationID.y * threadSize.x + gl_GlobalInvocationID.x;
	float triDepth = -float(threadIdx) / float(thread1DSize);

	Vertex triangle[3];
	Instance triData;
	vec2 triCenter = vec2(threadID.xy) / vec2(threadSize.xy) * 2.0 - 1.0 + vec2(R) / 2.0;
	vec2 topPoint = triCenter.xy + vec2(0.0, R);
	triData.ctrRad = vec4(triCenter.xy, R, 0.0);
	
	triangle[0].pos = vec4(topPoint, triDepth, 1.0);
	triangle[0].color = vec4(1.0, 0.0, 0.0, 1.0);
	triangle[1].pos = vec4(rotate(2.0 * M_PI / 3.0, triCenter, topPoint), triDepth, 1.0);
	triangle[1].color = vec4(0.0, 1.0, 0.0, 1.0);
	triangle[2].pos = vec4(rotate(4.0 * M_PI / 3.0, triCenter, topPoint), triDepth, 1.0);
	triangle[2].color = vec4(0.0, 0.0, 1.0, 1.0);

	uint bufIdx = atomicAdd(vbuf.counter, 1);
	vbuf.data[bufIdx * 3 + 0] = triangle[0];
	vbuf.data[bufIdx * 3 + 1] = triangle[1];
	vbuf.data[bufIdx * 3 + 2] = triangle[2];
	ibuf.data[bufIdx] = triData;
}
